"    General options\n"
"      --vr-verbose=<yes|no> [default=no]\n"
"          Toggle verbosity: prints messages for x387 instructions and client\n"
"          requests.\n"
"\n"
"      --count-op=<yes|no> [default=yes]\n"
"          Toggle floating-point operations counting.\n"
"\n"
"    Perturbation of floating-point operations\n"
"      --rounding-mode=<random|average|upward|downward|toward_zero|farthest>\n"
"      [default=nearest]\n"
"          Emulate the given rounding mode. If this option is not provided,\n"
"          Verrou always rounds to the nearest floating-point. Supported\n"
"          rounding modes are:\n"
"\n"
"          ·   Random rounding modes: random, average.\n"
"\n"
"          ·   IEEE-754 rounding modes: nearest (default), upward, downward,\n"
"              toward_zero.\n"
"\n"
"          ·   Other: farthest, float.\n"
"\n"
"      --vr-seed=RNG_SEED [default=automatically generated]\n"
"          If present, this option allows setting the seed of the\n"
"          pseudo-Random Number Generator used for the random or average\n"
"          rounding modes. This helps reproducing the behaviour of a program\n"
"          under Verrou.\n"
"\n"
"          If this option is omitted, the pRNG is seeded with a value based on\n"
"          the current time and process id, so that it should change at each\n"
"          execution.\n"
"\n"
"      --vr-instr=<add|sub|mul|div|mAdd|mSub|conv> [default=all]\n"
"          Toggle instrumentation of floating-point additions, subtractions,\n"
"          multiplications, divisions, fused multiply additions, fused\n"
"          multiply subtractions, conversions (only double to float cast)\n"
"          respectively. This option can be set multiple times to instrument\n"
"          multiple types of operations.\n"
"\n"
"          If this option is not provided, all supported operations types are\n"
"          instrumented.\n"
"\n"
"      --vr-instr-scalar=<yes|no> [default=no]\n"
"          Toggle instrumentation of x387 scalar instructions.\n"
"\n"
"    Instrumentation scope\n"
"      --instr-atstart=<yes|no> [default=yes]\n"
"          Toggle instrumentation state on or off at program start. Useful in\n"
"          combination with client requests.\n"
"\n"
"      --exclude=FILE\n"
"          Symbols listed in FILE will be left uninstrumented.\n"
"\n"
"      --gen-exclude=FILE\n"
"          Generate in FILE a list of all symbols encountered during program\n"
"          execution. This is useful to build an exclusion list.\n"
"\n"
"          In combination with --exclude, only list symbols which were not\n"
"          already present in the provided exclusion list.\n"
"\n"
"          WARNING: in order to generate a correct list, the whole binary\n"
"          (including symbols listed in the list provided using --exclude)\n"
"          must be instrumented. When using both --gen-exclude and --exclude,\n"
"          it is advised to avoid perturbating rounding-modes using\n"
"          --rounding-mode=nearest.\n"
"\n"
"          As a special case, if SYMNAME is left blank, output all encountered\n"
"          symbols, regardless of their position in the call tree.\n"
"\n"
"      --source=FILE\n"
"          When this option is present, only instructions coming from source\n"
"          code lines listed in FILE are instrumented.\n"
"\n"
"      --gen-source=FILE\n"
"          Generate in FILE the list of all source code lines encountered\n"
"          during program execution.\n"
"\n"
"          In combination with --source, only list source code lines which\n"
"          were not already present in the provided list.\n"
"\n"
"    Performance optimization\n"
"      --vr-unsafe-llo-optim=<yes|no> [default=no]\n"
"          Activate faster instrumentation process but unsafe when binary\n"
"          mixes llo and vect instructions.\n"
"\n"
