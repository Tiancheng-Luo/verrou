<?xml version="1.0"?> <!-- -*- sgml -*- -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<section id="vr-manual.localization" xreflabel="Error localization">
  <title>Debugging and error localization</title>

  <para>
    We describe in this section techniques which can help determining the origin of numerical errors
    in the source code of the analyzed program.
  </para>

  <section id="vr-manual.localization.dd" xreflabel="Delta-Debugging">
    <title>Delta-debugging with the <command>verrou_dd_sym</command> and <command>verrou_dd_line</command> commands</title>

    <para>
      The first technique builds upon Verrou's <xref linkend="vr-manual.feat.exclude"/> feature in
      order to perform a search of functions and source code lines whose perturbation produces the
      most important errors in final results. The idea is the following:
      <itemizedlist>
        <listitem><simpara>First, a complete list of all symbols (which contain perturbated
	floating point instruction) is generated. It is expected that
        perturbing all functions in this list will produce inexact results. On the other hand,
        excluding all symbols from the scope of perturbations should produce unperturbed
        results.</simpara></listitem>
        <listitem><simpara>By splitting the symbols list in two parts, and perturbing each half
        separately, it is possible to determine whether each perturbed half produces inexact
        results.</simpara></listitem>
        <listitem><simpara>Going on like this and performing a bisection of the list of symbols, the
        algorithm eventually finds a subset of functions whose only perturbation is enough to
        produce inexact results.</simpara></listitem>
        <listitem><simpara>The same process can be iterated over all source code lines belonging to
        the identified unstable symbols (provided that the binary embeds debugging
        information).</simpara></listitem>
      </itemizedlist>
    </para>

    <para>
      This algorithm is called <emphasis>Delta-Debugging</emphasis>.
      <!-- , and is for example used in <command>git bisect</command>. -->
      It is automated by the <command>verrou_dd_sym</command> and <command>verrou_dd_line</command> command,
      which can be used in the following way:
    </para>

    <simplesect>
      <title>Synopsis</title>

      <screen><cmdsynopsis id="vr-manual.verrou_dd_sym.synopsis">
        <command>verrou_dd_sym [options]</command>
        <arg choice="req"><replaceable>/path/to/run_script</replaceable></arg>
        <arg choice="req"><replaceable>/path/to/cmp_script</replaceable></arg>
      </cmdsynopsis></screen>

      <screen><cmdsynopsis id="vr-manual.verrou_dd_line.synopsis">
        <command>verrou_dd_line [options]</command>
        <arg choice="req"><replaceable>/path/to/run_script</replaceable></arg>
        <arg choice="req"><replaceable>/path/to/cmp_script</replaceable></arg>
      </cmdsynopsis></screen>

    </simplesect>
    <simplesect>
      <title>Description</title>
      <para>
	<command> verrou_dd_sym </command> is dedicated to search instable symbols (it corresponds more or less to code function).
	Whereas <command> verrou_dd_sym </command> is dedicated to search instable lines for code compiled with debugging symbols (with -g option).
      </para>

      <para id="vr-manual.verrou_dd.desc">
        Arguments passed to <command>verrou_dd_sym</command> or <command>verrou_dd_line</command> are scripts.
	These scripts will be called during the delta-debugging process to automate
        the tasks of running your program under Verrou, and verifying the results. The scripts will
        be called with the following arguments:

        <variablelist>
          <varlistentry>
            <term>
              <command><replaceable>run_script</replaceable></command>
              <arg choice="req"><replaceable>dir</replaceable></arg>
            </term>
            <listitem><para> Should run your program under Verrou, and put the results somewhere
            under the <replaceable>dir</replaceable> directory. A minimal example could look like
            the following:</para>
            <programlisting>
#!/bin/bash
DIR="$1"
valgrind --tool=verrou --rounding-mode=random <replaceable>program args</replaceable> &gt; ${DIR}/results.dat</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <command><replaceable>cmp_script</replaceable></command>
              <arg choice="req"><replaceable>ref_dir</replaceable></arg>
              <arg choice="req"><replaceable>run_dir</replaceable></arg>
            </term>
            <listitem>
              <simpara>
                Should check whether program results in <replaceable>run_dir</replaceable> (as
                stored by a previous call to
                <command><replaceable>run_script</replaceable></command>) are "valid". The precise
                meaning of "valid" is left for the user to determine, depending on the program being
                analyzed. If a comparison to reference results is needed, directory
                <replaceable>ref_dir</replaceable> contains the results produced by an
                uninstrumented run of the
                program. <command><replaceable>cmp_script</replaceable></command> should return 0 if
                and only if the results are "valid".
              </simpara>
              <simpara>
                A minimal example could look like the following:
              </simpara>
              <programlisting>
#!/bin/bash
REF="$1"
RUN="$2"
diff ${REF}/results.dat ${RUN}/results.dat</programlisting>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </simplesect>

    <simplesect>
      <title>Options and environment variables</title>

      <para>
        The following options or environment variables affect the behaviour of <command>verrou_dd_sym</command> and <command>verrou_dd_line</command>:
      </para>

      <variablelist id="vr-manual.verrou_dd.envvars">
        <varlistentry>
          <term>
            <computeroutput>--nruns</computeroutput> or <computeroutput>VERROU_DD_NRUNS</computeroutput>
          </term>
          <listitem>
            <para>An integer setting the required number successful runs needed to consider a
            configuration as stable. If this environment variable is not set, the default value is
            5.</para>
          </listitem>
        </varlistentry>


	<varlistentry>
          <term>
             <computeroutput>--num-threads</computeroutput> or <computeroutput>VERROU_DD_NUM_THREADS</computeroutput>
          </term>
          <listitem>
            <para> Allows to perform <computeroutput>VERROU_DD_NUM_THREADS</computeroutput> runs in parallel.
	     If this environment variable is not set, the parallelism is not activated.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
          <term>
             <computeroutput>--resWithAllSamples </computeroutput> or <computeroutput>VERROU_DD_RES_WITH_ALL_SAMPLES</computeroutput>
          </term>
          <listitem>
            <para> Disable the early exit for result directories. It is useful to compute estimator for all
	    <computeroutput>ddmin*</computeroutput> directories with the same number of samples and hence
	    to sort them.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
          <term>
            <computeroutput>--algo=</computeroutput> or <computeroutput>VERROU_DD_ALGO</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose one of the two Delta-Debugging algorithms (<computeroutput>ddmax</computeroutput> and <computeroutput>rddmin</computeroutput>).
	    </para>
	    <para>
	      <computeroutput>rddmin</computeroutput>: return recursively the min-set of unstable
	      symbols. <computeroutput>VERROU_DD_NUM_THREADS</computeroutput> is ignored.
	    </para>
	    <para>
	      <computeroutput>ddmax</computeroutput>: return the max-set of stable symbols (or lines). 
	    </para>

	    <para>
	    If this environment variable is not set, the default value is set to <computeroutput>rddmin</computeroutput>.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
          <term>
            <computeroutput>--rddmin=</computeroutput> or <computeroutput>VERROU_DD_RDDMIN</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose one of the variant of rddmin algorithms.
	    </para>
	    <para>
	      "", <computeroutput>strict</computeroutput>: rddmin algorithm with constant number of samples
	    </para>
	    <para>
	      <computeroutput>s</computeroutput>, <computeroutput>stoch</computeroutput>: rddmin algorithm with increasing number of samples (called srddmin)
	    </para>
	    <para>
	      <computeroutput>d</computeroutput>, <computeroutput>dicho</computeroutput>: srddmin algorithm pre-filtered by a dichotomy method (called drddmin)
	    </para>

	    <para>
	    The default value is set to <computeroutput>dicho</computeroutput>.
	    </para>
          </listitem>
        </varlistentry>


	<varlistentry>
          <term>
            <computeroutput>--rddmin-tab=</computeroutput> or <computeroutput>VERROU_DD_RDDMIN_TAB</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose the evolution of the number of samples used by the srddmin algorithm.
	    </para>
	    <para>
	      <computeroutput>exp</computeroutput>: increases the number of samples from 1 to
	      <computeroutput>VERROU_DD_NRUNS</computeroutput> with exponential rate.
	    </para>
	    <para>
	      <computeroutput>all</computeroutput>: consecutively try all numbers of samples from 1
	      to <computeroutput>VERROU_DD_NRUNS</computeroutput>.
	    </para>
	    <para>
	      <computeroutput>single</computeroutput>: directly use the number of samples given by
	      <computeroutput>VERROU_DD_NRUNS</computeroutput>. srddmin is equivalent to rddmin in
              this case.
	    </para>

	    <para>
	    The default value is set to <computeroutput>exp</computeroutput>.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
          <term>
	    <computeroutput>--dicho-tab=</computeroutput> or <computeroutput>VERROU_DD_DICHO_TAB</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose the evolution of the number of samples used by the
              binary search in the first part of the drddmin algorithm.
	    </para>
	    <para>
	      <computeroutput>exp</computeroutput>: increases the number of samples from 1 to
	      <computeroutput>VERROU_DD_NRUNS</computeroutput> with exponential rate.
	    </para>
	    <para>
	      <computeroutput>all</computeroutput>: consecutively try all numbers of samples from 1
	      to <computeroutput>VERROU_DD_NRUNS</computeroutput>.
	    </para>
	    <para>
	      <computeroutput>single</computeroutput>: use the number of samples given by
	      <computeroutput>VERROU_DD_NRUNS</computeroutput>.
	    </para>
	    <para>
	      <computeroutput>half</computeroutput>: use half the number of samples given by
	      <computeroutput>VERROU_DD_NRUNS</computeroutput>.
	    </para>
	    <para>
	      <replaceable>N</replaceable>: user-provided value (must be an integer 
	      between 1 and <computeroutput>VERROU_DD_NRUNS</computeroutput>).
	    </para>

	    <para>
	    The default value is set to <computeroutput>half</computeroutput>.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
	  <term>
            <computeroutput>--dicho-granularity=</computeroutput> or <computeroutput>VERROU_DD_DICHO_GRANULARITY</computeroutput>
          </term>
        <listitem>
            <para>
	      Option to choose the granularity of the splitFunction of the dichotomy algorithm (used by drddmin).
	    </para>
	    <para>
	    The default value is set to 2.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
	  <term>
            <computeroutput>--quiet</computeroutput> or <computeroutput>VERROU_DD_QUIET</computeroutput>
          </term>
        <listitem>
            <para>
	      Option to reduce the verbosity of <command>verrou_dd_sym</command> or <command>verrou_dd_line</command>.
	    </para>
          </listitem>
        </varlistentry>


	<varlistentry>
          <term>
	    <computeroutput>--cache=</computeroutput> or <computeroutput>VERROU_DD_CACHE</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose the policy with the existing cache <computeroutput>dd.sym</computeroutput> or <computeroutput>dd.line</computeroutput>
	    </para>
	    <para>
	      <computeroutput>clean</computeroutput>: the previous cache is removed (after reading required information for <computeroutput>--rddmin-heuristics-cache</computeroutput>).
	    </para>
	    <para>
	      <computeroutput>rename</computeroutput>: the previous cache is renamed with time information (time of last symlink creation).
	    </para>
	    <para>
	      <computeroutput>rename_keep_result</computeroutput>: the previous cache is renamed and all configurations not pinpointed by symlink are removed.
	      This option is a compromised between disk usage and the opportunity to used the <computeroutput>--rddmin-heuristics-cache=</computeroutput> option.
	    </para>
	    <para>
	      <computeroutput>keep-run</computeroutput>: the previous cache is kept but the <computeroutput>cmp_script</computeroutput> is run again. Useful when
	      only the <computeroutput>cmp_script</computeroutput> is modified.
	    </para>
	    <para>
	      <computeroutput>continue</computeroutput>: the previous cache is kept for all computation. This option is really useful after manual cache modification to recover computation after
	      error such as <computeroutput>No space left on device</computeroutput> or <computeroutput>job timeout</computeroutput>.
	    </para>

	    <para>
	    The default value is set to <computeroutput>continue</computeroutput> (will probably change soon).
	    </para>
          </listitem>
        </varlistentry>


	<varlistentry>
	  <term>
	    <computeroutput>--rddmin-heuristics-cache=</computeroutput> or <computeroutput>VERROU_DD_RDDMIN_HEURISTICS_CACHE</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose the policy with cache to use to prefiltered the rddmin algorithm by previous ddmin results.
	    </para>
	    <para>
	      <computeroutput>none</computeroutput>: the current cache and old cache directory are not used.
	    </para>
	    <para>
	      <computeroutput>cache</computeroutput>: only the current cache directory is used.
	    </para>
	    <para>
	      <computeroutput>all_cache</computeroutput>: the current and old cache directories are used. The old cache directories come from previous run with <computeroutput>rename</computeroutput> or <computeroutput>rename_keep_result</computeroutput> values for <computeroutput>--cache=</computeroutput> option.
	    </para>

	    <para>
	    The default value is set to <computeroutput>none</computeroutput>.
	    </para>
          </listitem>
        </varlistentry>

	<varlistentry>
	  <term>
	    <computeroutput>--rddmin-heuristics-rep=</computeroutput> or <computeroutput>VERROU_DD_RDDMIN_HEURISTICS_REP</computeroutput>
          </term>
          <listitem>
            <para>
	      Option to choose the directory used to prefiltered the rddmin algorithm by previous ddmin results. Could be used several times (with option but not with environment variable). Usually
	      useful after a manual cache renaming.
	    </para>
          </listitem>
        </varlistentry>



      </variablelist>
    </simplesect>

    <simplesect>
      <title>Results *rddmin </title>
      <para id="vr-manual.verrou_dd.results-rddmin">
        <command>verrou_dd_sym</command> (resp. <command>verrou_dd_line</command>) stores many intermediate results within the
        <computeroutput>dd.sym</computeroutput> (resp. <computeroutput>dd.line</computeroutput>) directory. Synthetic results are present in the form
        of symbolic links named after the pattern: <computeroutput>ddmin-<replaceable>N</replaceable></computeroutput>.
      </para>
      <para>
	The list of all symbols (resp. lines) found to be unstable in the
	<computeroutput>ddmin-<replaceable>N</replaceable></computeroutput> set can be retrieved in
	the file: <computeroutput>ddmin-<replaceable>N</replaceable>/dd.include</computeroutput>.
      </para>
      <para>
	The symbolic link <computeroutput>rddmin-cmp</computeroutput>  pinpoints the configuration which is the complement of the union of all ddmin configuration. This successful
	configuration terminates the rddmin algorithm.
      </para>
      <para>
	For debug purpose there are one symbolic link (<computeroutput>FullPerturbation</computeroutput>) to pinpoint the configuration (which should fail) with all symbols (resp. lines) perturbed and another (<computeroutput>NoPerturbation</computeroutput>) to pinpoint the configuration without any perturbation (should be a successful configuration).
      </para>

    </simplesect>

    <simplesect>
      <title>Results ddmax</title>
      <para id="vr-manual.verrou_dd.results">
        <command>verrou_dd_sym</command> (resp. <command>verrou_dd_line</command>) stores many intermediate results within the
        <computeroutput>dd.sym</computeroutput> (resp. <computeroutput>dd.line</computeroutput>)
        directories. The ddmax configuration is pinpointed by a symbolic link (<computeroutput>ddmax</computeroutput>).	

	<!-- Synthetic results are present in the form of symbolic links named in the -->
        <!-- following way: -->
        <!-- <variablelist> -->
        <!--   <varlistentry> -->
        <!--       <term>dd.sym.<replaceable>SYMNAME</replaceable></term> -->
        <!--       <listitem><simpara>The presence of such a symbolic link indicates that the function -->
        <!--       associated to symbol <replaceable>SYMNAME</replaceable> has been detected as -->
        <!--       unstable. When the <option><xref linkend="opt.demangle"/>=no</option> option was -->
        <!--       provided in the verrou command line in -->
        <!--       <command><replaceable>run_script</replaceable></command>, -->
        <!--       <replaceable>SYMNAME</replaceable> is in mangled form. In this case, the -->
        <!--       human-readable name of the function can be retrieved using -->
        <!--       <command>c++filt</command>.</simpara></listitem> -->
        <!--   </varlistentry> -->
        <!--   <varlistentry> -->
        <!--     <term>dd.sym.<replaceable>FILENAME</replaceable>:<replaceable>LINENO</replaceable></term> -->
        <!--     <listitem><simpara>Such a symbolic link indicates that an instability was found in line -->
        <!--     <replaceable>LINENO</replaceable> of file -->
        <!--     <replaceable>FILENAME</replaceable>.</simpara></listitem> -->
        <!--   </varlistentry> -->
        <!-- </variablelist> -->
      </para>
    </simplesect>

  </section>

    <section id="vr-manual.localization.coverage" xreflabel="Coverage">
    <title>Code coverage comparison</title>
    <para>
      The first technique to localize unstable tests, is based on the compatibility with instrumentation provided by the compilers.
      The idea is to produce with compiler tools (option <computeroutput>--coverage</computeroutput> and tool <computeroutput>gcov</computeroutput> for <computeroutput>gcc</computeroutput>) two code coverage for the analyzed test case.
      The first one can be generate without verrou or with <computeroutput>nearest</computeroutput> rounding mode and the second one with <computeroutput>random</computeroutput> rounding mode. The second one can be produced several time, to
      get a coverage with sufficient discrepancie compared to the one with  <computeroutput>nearest</computeroutput> rounding mode. Once both code coverage generated, simple graphical tools
      as <computeroutput>meld</computeroutput> or <computeroutput>kompare</computeroutput> can be used to pinpoint potential unstable test.
    </para>
    </section>

    <section id="vr-manual.localization.CovBB" xreflabel="CovBB">
      <title>Basic Block coverage comparison</title>
      <para>
	The second technique to localize unstable tests, is based on Basic Block (BB) Coverage provided by verrou. The idea behind this technique is the same as behind code coverage comparison except in the way to produce the coverage.
	First it is required to specify which part of the code to trace (instrument BB coverage), with a file format similar to symbols exclusion file. To instrument only the binary without library the following script can be used :
	<programlisting>
	 echo "*" ‘readlink -f <replaceable>program</replaceable>‘ > trace.inc
	</programlisting>

	With the <computeroutput> trace.inc</computeroutput> the BB coverage instrumenttion can be activated with the <computeroutput>--trace=</computeroutput> option :
	<programlisting>
	  valgrind --tool=verrou --rounding-mode=random --trace=trace.inc <replaceable>program args</replaceable>
	</programlisting>

	Hence two files <computeroutput>trace_bb_cov.log-PID</computeroutput> and <computeroutput>trace_bb_info.log-PID</computeroutput> are generated.
	The first one contains counter information for each Basic Blocks and the second one contains debug information for each Basic Bloc. These two files (which must be moved together)
	can be post-treated to be as readable as possible with the <computeroutput>genCovBB</computeroutput> command.
	<programlisting>
	genCovBB trace_bb_cov.log-*
	</programlisting>

	The differences between generated coverage  are more difficult to analyze compared to the ones generated by code coverage tools, because the code structure is lost. Nevertheless
	it is easier to generate  and can produced really powerful
	information if used with the client request <computeroutput>VERROU_DUMP_COVER</computeroutput> to recover partially time information lost by coverage techniques.

      </para>
    </section>

</section>

<!-- Local Variables: -->
<!-- mode: nxml -->
<!-- fill-column: 100 -->
<!-- End: -->
