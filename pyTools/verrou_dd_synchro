#!/bin/sh
''''exec python3 -u "$0" "$@" #'''
# This hack is an ugly but portable alternative to #!/usr/bin/env -S python3 -u


import sys
import os
from valgrind import dd_config
from valgrind import DD_stoch
from valgrind import DD_exec_stat


class DDSynchro(DD_stoch.DDStoch):
    def __init__(self, config, prefix="dd.synchro"):
        DD_stoch.DDStoch.__init__(self, config, prefix)

    def referenceRunEnv(self):
        return {"VERROU_ROUNDING_MODE": "nearest",
                "VERROU_MCA_MODE": "ieee",
                "GENERATE_SYNCHRO_LIST":   os.path.join(self.ref_,"dd.synchro.gen"),
                "GENERATE_SYNCHRO_FP_LIST":   os.path.join(self.ref_,"dd.synchroFP.gen"),
#                "DEBUG_PRINT_SYNCHRO": "yes",
        }

    def isFileValidToMerge(self, name):
        return name.startswith("dd.synchroFP.")

    def getDeltaFileName(self):
        return "dd.synchro"

    def sampleRunEnv(self,dirName):
        return {"SYNCHRO_LIST": os.path.join(dirName,self.getDeltaFileName() +".include"),
 #               "DEBUG_PRINT_SYNCHRO": "yes",
        }

    def coerce(self, delta_config):
        return  "\n  " + "\n  ".join(["%s:%d" % e for e in
                                      [(col[0], int(col[1])) for col in
                                       [(l.strip()+"\t\t").split("\t") for l in delta_config]]])



if __name__ == "__main__":
    et=DD_exec_stat.exec_stat("dd.synchro")
    config=dd_config.ddConfig(sys.argv,os.environ, ["INTERFLOP","VERROU"])
    dd = DDSynchro(config)
    dd.run()
    et.terminate()
