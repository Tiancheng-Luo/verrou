#!/usr/bin/env python3

# This file is part of Verrou, a FPU instrumentation tool.

# Copyright (C) 2014-2021 EDF
#   F. Févotte <francois.fevotte@edf.fr>
#   B. Lathuilière <bruno.lathuiliere@edf.fr>


# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# 02111-1307, USA.

# The GNU Lesser General Public License is contained in the file COPYING.

import sys
import os
from valgrind import dd_config
from valgrind import DD_stoch
from valgrind import DD_exec_stat


class DDline(DD_stoch.DDStoch):
    def __init__(self, config, prefix="dd.line"):
        DD_stoch.DDStoch.__init__(self, config, prefix)

    def referenceRunEnv(self):
        return {"VERROU_ROUNDING_MODE": "nearest",
                "VERROU_MCA_MODE": "ieee",
                "VERROU_GEN_SOURCE":   os.path.join(self.ref_,"dd.line.%p")}

    def isFileValidToMerge(self, name):
        return name.startswith("dd.line.")
    
    def getDeltaFileName(self):
        return "dd.line"

    def sampleRunEnv(self,dirName):
        return {"VERROU_SOURCE": os.path.join(dirName,self.getDeltaFileName() +".include")}

    def coerce(self, delta_config):
        return  "\n  " + "\n  ".join(["%s:%d (%s)" % e for e in
                                      [(col[0], int(col[1]), col[2]) for col in
                                       [(l.strip()+"\t\t").split("\t") for l in delta_config]]])



if __name__ == "__main__":
    et=DD_exec_stat.exec_stat("dd.line")
    config=dd_config.ddConfig(sys.argv,os.environ, ["INTERFLOP","VERROU"])
    dd = DDline(config)
    dd.run()
    et.terminate()
