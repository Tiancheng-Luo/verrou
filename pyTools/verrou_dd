#!/bin/sh
''''exec python3 -u "$0" "$@" #'''
# This hack is an ugly but portable alternative to #!/usr/bin/env -S python3 -u


import sys
import os
from valgrind import dd_config
from valgrind import DD_stoch

import time




#debut DDsym
def genExcludeFile(ref, dest, include):
    """Generate the dd.exclude and dd.include file in rep dest from the dd.exclude (coming from ref) and include tab (usually called deltas)"""

    if ref==None and include==None:
        open(os.path.join(dest,"dd.exclude"),"w")
        return

    with open(os.path.join(ref,"dd.exclude"), "r") as f:
        excludes = f.readlines()
    with open(os.path.join(dest,"dd.include"), "w") as f:
        for d in include:
            excludes.remove(d)
            f.write(d)
    with open(os.path.join(dest,"dd.exclude"), "w") as f:
        for line in excludes:
            f.write(line)

    
class DDsym(DD_stoch.DDStoch):
    def __init__(self, config, prefix="dd.sym"):
        DD_stoch.DDStoch.__init__(self, config, prefix)


    def referenceRunEnv(self):
        return {"VERROU_ROUNDING_MODE": "nearest",
                         "VERROU_MCA_MODE": "ieee",
                         "VERROU_GEN_EXCLUDE":   os.path.join(self.ref_,"dd.exclude.%%p")}
        
    def lambdaSampleRunEnv(self):
        return lambda dirName: {"VERROU_EXCLUDE": os.path.join(dirName,"dd.exclude")}

    def lambdaGenDeltaFile(self):
        return genExcludeFile
    

    def coerce(self, delta_config):
        return "\n  " + "  ".join(delta_config)

    def getDeltaFileName(self):
        return "dd.exclude"
        

#Debut DDline

def genSourceFile(ref, dest, deltas):
    with open(os.path.join(dest,"dd.source"), "w") as f:
        f.write("__unknown__\t0\n")
        for d in deltas:
            f.write(d)

class DDline(DD_stoch.DDStoch):
    def __init__(self, config, prefix="dd.line"):
        DD_stoch.DDStoch.__init__(self, config, prefix)


    def referenceRunEnv(self):
        return {"VERROU_ROUNDING_MODE": "nearest",
                "VERROU_MCA_MODE": "ieee",
                "VERROU_GEN_SOURCE":   os.path.join(self.ref_,"dd.source.%%p")}
        
    def getDeltaFileName(self):
        return "dd.source"
    
    def lambdaSampleRunEnv(self):
        return lambda dirName: {"VERROU_SOURCE": os.path.join(dirName,"dd.source")}
    
    def lambdaGenDeltaFile(self):
        return genSourceFile        

    def coerce(self, delta_config):
        return  "\n  " + "\n  ".join(["%s:%d (%s)" % e for e in
                                      [(col[0], int(col[1]), col[2]) for col in
                                       [(l.strip()+"\t\t").split("\t") for l in delta_config]]])







def main(config):
    ddSymOrLine=config.get_SymOrLine()
    if ddSymOrLine=="line":
        dd = DDline(config)
    if ddSymOrLine=="sym":
        dd = DDsym(config)
    dd.run()
    return



class exec_stat:
    def __init__(self):
        self.timeInit()

    def terminate(self, config):
        self.timeEnd()
        self.printElapsed(int(self.end- self.start))
        self.printNbRun(ddSymOrLine=config.get_SymOrLine())

    def timeInit(self):
        self.start = time.time()

    def timeEnd(self):
        self.end = int(time.time())

    def printElapsed(self,duration):
        s= duration % 60
        rm= duration //60
        m=rm%60
        rh=rm//60
        h=rh%24
        rd=rh//24
        print ("\nElapsed Time: %id %ih %imin %is   "%(rd,h,m,s) )

    def isNew(self, filename):
        return ((os.stat(filename).st_mtime) > self.start)

    def printNbRun(self, ddSymOrLine,dirName="."):
        import glob

        runTab=glob.glob(dirName+"/dd."+ddSymOrLine+"/*/dd.run*/dd.run.out")
        runFilter=[filename for filename in runTab if self.isNew(filename)]
        print(ddSymOrLine+"  search : %i run (with cache included: %i)"%(len(runFilter),len(runTab)) )

if __name__ == "__main__":
    et=exec_stat()

    config=dd_config.ddConfig(sys.argv,os.environ, ["INTERFLOP","VERROU"])
    main(config)

    et.terminate(config)
